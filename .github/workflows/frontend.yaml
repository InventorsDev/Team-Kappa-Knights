name: Frontend CI

on: 
    push:
        paths: 
            - Frontend/**
        branches: 
            - '**'
    pull_request:
        paths:
            - Frontend/**
        branches:
            - main
    workflow_dispatch:

jobs:
  ## CODE VALIDATION
    lint-and-test:
      runs-on: ubuntu-latest
      defaults:
            run:
              working-directory: Frontend/
      steps:
        - name: Checkout Code
          uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

        - name: Setup Node
          uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
          with:
            node-version: 20.x

        - name: Cache node modules
          id: cache
          uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 #v4
          with:
            path: frontend/node_modules
            key: ${{ runner.os }}-node-${{ hashFiles('Frontend/package-lock.json') }}
            restore-keys: |
              ${{ runner.os }}-node-

        - name: Install dependencies
          if: steps.cache.outputs.cache-hit != true
          run: npm install

        - name: Lint & Test
          run: |
            npm run lint && npm run test
    
    ## SECRET SCANNING
    secret-scanning:
      runs-on: ubuntu-latest
      defaults:
          run:
              working-directory: Frontend/
      steps:
        - name: Checkout Code
          uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

        - name: Secret Scanning
          uses: trufflesecurity/trufflehog@0f58ae7c5036094a1e3e750d18772af92821b503
          with:
            extra_args: --results=verified,unknown

    ## CODE QUALITY CHECK
    # sonar-scan:
    #   runs-on: ubuntu-latest
    #   if: github.event_name == 'pull_request' && github.base_ref == 'main'
    #   steps:
    #     - name: Checkout Code
    #       uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

    #     - name: SonarQube Scan
    #       uses: SonarSource/sonarqube-scan-action@1a6d90ebcb0e6a6b1d87e37ba693fe453195ae25
    #       env:
    #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    #     - name: SonarQube Quality Gate check
    #       id: sonarqube-quality-gate-check
    #       uses: sonarsource/sonarqube-quality-gate-action@cf038b0e0cdecfa9e56c198bbb7d21d751d62c3b
    #       with:
    #         pollingTimeoutSec: 300
    #       env:
    #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
   
    ## DOCKER IMAGE BUILD AND PUSH TO DOCKER HUB
    # build-and-push: 
    #   runs-on: ubuntu-latest
    #   needs: [lint-and-test, secret-scanning, sonar-scan]
    #   defaults:
    #         run:
    #             working-directory: Frontend/
    #   steps: 
    #     - name: Checkout Code
    #       uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

    #     - name: Login to Docker Hub
    #       uses: docker/login-action@v3
    #       with:
    #         username: ${{ vars.DOCKERHUB_USERNAME }}
    #         password: ${{ secrets.DOCKERHUB_TOKEN }}

    #     - name: Set up Docker Buildx
    #       uses: docker/setup-buildx-action@v3

    #     - name: Set image variables
    #       id: vars
    #       run: |
    #         echo "REPOSITORY=nuroki-neuroloom" >> $GITHUB_ENV
    #         echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

    #     - name: Build docker image
    #       run: |
    #         docker build -t $REPOSITORY:$IMAGE_TAG .

    #     - name: Run Trivy vulnerability scanner
    #       uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 #v0.33.1
    #       with:
    #         image-ref: ${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
    #         format: table
    #         severity: CRITICAL
    #         exit-code: '1'   # fail pipeline if high/critical issues found

    #     - name: Push docker image to Docker Hub
    #       if: success()   ## only push if Trivy passes
    #       run: |
    #         docker push $REPOSITORY:$IMAGE_TAG