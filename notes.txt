json format for recomendation
{
  "skill_level": "advanced",
  "course_type": "data_science",
  "interests": ["Python", "Pandas"]
}






# ==============================
# cURL Commands
# ==============================

# Basic request
curl -X POST http://localhost:8000/courses/recommend/ \
  -H "Content-Type: application/json" \
  -d '{
    "skill_level": "beginner",
    "interests": ["Machine Learning"]
  }'

# Request with multiple interests
curl -X POST http://localhost:8000/courses/recommend/ \
  -H "Content-Type: application/json" \
  -d '{
    "skill_level": "intermediate",
    "interests": ["Machine Learning", "Data Science", "Python"]
  }'

# Request for advanced level
curl -X POST http://localhost:8000/courses/recommend/ \
  -H "Content-Type: application/json" \
  -d '{
    "skill_level": "advanced",
    "interests": ["Deep Learning", "Neural Networks"]
  }'

# ==============================
# Python Requests
# ==============================

import requests
import json

# Base URL (adjust according to your setup)
BASE_URL = "http://localhost:8000"

# Basic request
def test_basic_recommendation():
    url = f"{BASE_URL}/courses/recommend/"
    data = {
        "skill_level": "beginner",
        "interests": ["Machine Learning"]
    }
    
    response = requests.post(url, json=data)
    print(f"Status Code: {response.status_code}")
    print(f"Response: {json.dumps(response.json(), indent=2)}")

# Multiple interests request
def test_multiple_interests():
    url = f"{BASE_URL}/courses/recommend/"
    data = {
        "skill_level": "intermediate",
        "interests": ["Machine Learning", "Data Science", "Python", "Statistics"]
    }
    
    response = requests.post(url, json=data)
    return response.json()

# Advanced level request
def test_advanced_level():
    url = f"{BASE_URL}/courses/recommend/"
    data = {
        "skill_level": "advanced",
        "interests": ["Deep Learning"]
    }
    
    response = requests.post(url, json=data)
    return response.json()

# Test invalid input (for error handling)
def test_invalid_input():
    url = f"{BASE_URL}/courses/recommend/"
    data = {
        "skill_level": "expert",  # Invalid level
        "interests": ["Machine Learning"]
    }
    
    response = requests.post(url, json=data)
    print(f"Error Response: {response.json()}")

# Run tests
if __name__ == "__main__":
    test_basic_recommendation()
    test_invalid_input()

# ==============================
# JavaScript (Fetch API)
# ==============================

// Basic request
const recommendCourses = async (skillLevel, interests) => {
    const response = await fetch('http://localhost:8000/courses/recommend/', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            skill_level: skillLevel,
            interests: interests
        })
    });
    
    const data = await response.json();
    return data;
};

// Example usage
recommendCourses('beginner', ['Machine Learning', 'Python'])
    .then(data => console.log(data))
    .catch(error => console.error('Error:', error));

// With error handling
const getRecommendations = async () => {
    try {
        const data = await recommendCourses('intermediate', ['Data Science', 'Statistics']);
        
        if (data.recommendations) {
            console.log(`Found ${data.total_found} courses:`);
            data.recommendations.forEach(course => {
                console.log(`- ${course.title} (Rating: ${course.rating})`);
            });
        }
    } catch (error) {
        console.error('Failed to get recommendations:', error);
    }
};

# ==============================
# jQuery AJAX
# ==============================

// Basic jQuery AJAX request
$.ajax({
    url: 'http://localhost:8000/courses/recommend/',
    method: 'POST',
    contentType: 'application/json',
    data: JSON.stringify({
        skill_level: 'beginner',
        interests: ['Machine Learning', 'Python']
    }),
    success: function(response) {
        console.log('Recommendations:', response);
        // Process the recommendations
        if (response.recommendations) {
            response.recommendations.forEach(function(course) {
                console.log(course.title + ' - Rating: ' + course.rating);
            });
        }
    },
    error: function(xhr, status, error) {
        console.error('Error:', xhr.responseJSON);
    }
});

# ==============================
# Postman Collection Format
# ==============================

{
    "info": {
        "name": "Course Recommendations API",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "Get Beginner Recommendations",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n    \"skill_level\": \"beginner\",\n    \"interests\": [\"Machine Learning\"]\n}"
                },
                "url": {
                    "raw": "http://localhost:8000/courses/recommend/",
                    "protocol": "http",
                    "host": ["localhost"],
                    "port": "8000",
                    "path": ["courses", "recommend"]
                }
            }
        },
        {
            "name": "Get Multiple Interests Recommendations",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n    \"skill_level\": \"intermediate\",\n    \"interests\": [\"Machine Learning\", \"Data Science\", \"Python\"]\n}"
                },
                "url": {
                    "raw": "http://localhost:8000/courses/recommend/",
                    "protocol": "http",
                    "host": ["localhost"],
                    "port": "8000",
                    "path": ["courses", "recommend"]
                }
            }
        }
    ]
}

# ==============================
# Expected Response Format
# ==============================

# Successful Response (200 OK)
{
    "recommendations": [
        {
            "course_id": 1,
            "title": "Introduction to Machine Learning",
            "description": "Learn the basics of machine learning...",
            "created_at": "2024-01-15T10:30:00Z",
            "updated_at": "2024-01-15T10:30:00Z",
            "course_url": "https://example.com/ml-course",
            "difficulty": "beginner",
            "rating": "4.50",
            "tags": [
                {
                    "tag_id": 1,
                    "name": "Machine Learning"
                },
                {
                    "tag_id": 2,
                    "name": "Python"
                }
            ]
        }
    ],
    "total_found": 1,
    "filters_applied": {
        "skill_level": "beginner",
        "interests": ["Machine Learning"]
    }
}

# Error Response (400 Bad Request)
{
    "error": "Invalid input data",
    "details": {
        "skill_level": ["This field is required."],
        "interests": ["This list may not be empty."]
    }
}